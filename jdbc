import java.sql.*;
import java.util.*;

public class CourseDAO {

    private Connection connection;

    public CourseDAO(Connection connection) {
        this.connection = connection;
    }

    // Create a new course
    public int createCourse(Course course) throws SQLException {
        String sql = "INSERT INTO courses (language_id, course_name, description, level) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, course.getLanguageId());
            stmt.setString(2, course.getCourseName());
            stmt.setString(3, course.getDescription());
            stmt.setString(4, course.getLevel());
            stmt.executeUpdate();
            
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);  // Return generated course_id
            }
            return -1;  // Return -1 if course wasn't created
        }
    }

    // Get all courses for a given language
    public List<Course> getCoursesByLanguage(int languageId) throws SQLException {
        List<Course> courses = new ArrayList<>();
        String sql = "SELECT * FROM courses WHERE language_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, languageId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                courses.add(mapResultSetToCourse(rs));
            }
        }
        return courses;
    }

    // Get course by ID
    public Course getCourseById(int courseId) throws SQLException {
        String sql = "SELECT * FROM courses WHERE course_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, courseId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return mapResultSetToCourse(rs);
            }
            return null;
        }
    }

    // Update course details
    public boolean updateCourse(Course course) throws SQLException {
        String sql = "UPDATE courses SET language_id = ?, course_name = ?, description = ?, level = ? WHERE course_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, course.getLanguageId());
            stmt.setString(2, course.getCourseName());
            stmt.setString(3, course.getDescription());
            stmt.setString(4, course.getLevel());
            stmt.setInt(5, course.getCourseId());
            int rowsUpdated = stmt.executeUpdate();
            return rowsUpdated > 0;
        }
    }

    // Delete course by ID
    public boolean deleteCourse(int courseId) throws SQLException {
        String sql = "DELETE FROM courses WHERE course_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, courseId);
            int rowsDeleted = stmt.executeUpdate();
            return rowsDeleted > 0;
        }
    }

    // Map the ResultSet to Course object
    private Course mapResultSetToCourse(ResultSet rs) throws SQLException {
        return new Course(
            rs.getInt("course_id"),
            rs.getInt("language_id"),
            rs.getString("course_name"),
            rs.getString("description"),
            rs.getString("level")
        );
    }
}

